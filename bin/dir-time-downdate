#!/usr/bin/env zsh
# Change directory timestamps recursively to match the newest file.
set -euo pipefail

# --- Default Configuration ---
CLEANUP_MACOS_FILES=true
INTERACTIVE_MODE=true
VERBOSE=false
DSSTORE_TEMPLATE=""
SHOW_TEMPLATE_CONFIG=false
SET_TEMPLATE_PATH=""
DRY_RUN=false
SHOW_HELP=false
QUIET_MODE=false
GENERATE_USER_TEMPLATE=false
VERSION="0.3.0" # Versioning
EXCLUDE_PATTERNS=()

# --- Statistics Tracking ---
STATS_DIRS_PROCESSED=0
STATS_DIRS_UPDATED=0
STATS_DIRS_EMPTY=0
STATS_DIRS_SKIPPED=0
STATS_FILES_SCANNED=0
STATS_DSSTORE_CREATED=0

# --- Argument Parsing ---
while [[ $# -gt 0 ]]; do
    case "$1" in
        --no-cleanup)
            CLEANUP_MACOS_FILES=false
            shift
            ;;
        --non-interactive)
            INTERACTIVE_MODE=false
            shift
            ;;
        --verbose|-v)
            VERBOSE=true
            shift
            ;;
        --template)
            if [[ -n "$2" ]]; then
                DSSTORE_TEMPLATE="$2"
                shift 2
            else
                echo "Error: --template requires a path" >&2
                exit 1
            fi
            ;;
        --set-template)
            if [[ -n "$2" ]]; then
                SET_TEMPLATE_PATH="$2"
                shift 2
            else
                echo "Error: --set-template requires a path" >&2
                exit 1
            fi
            ;;
        --show-template)
            SHOW_TEMPLATE_CONFIG=true
            shift
            ;;
        --generate-user-template)
            GENERATE_USER_TEMPLATE=true
            shift
            ;;
        --quiet|-q)
            QUIET_MODE=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --exclude|-e)
            if [[ -n "$2" ]]; then
                EXCLUDE_PATTERNS+=("$2")
                shift 2
            else
                echo "Error: --exclude requires a pattern" >&2
                exit 1
            fi
            ;;
        --version)
            echo "dir-time-downdate version $VERSION"
            exit 0
            ;;
        --help|-h)
            SHOW_HELP=true
            shift
            ;;
        -*)
            echo "Unknown option: $1" >&2
            # show_help is not available yet, so print basic usage
            echo "Usage: $0 [--help] [options] directory..." >&2
            exit 1
            ;;
        *)
            # Stop processing options, the rest are directories
            break
            ;;
    esac
done

# --- Function Definitions ---

show_help() {
    echo "Usage: $0 [options] directory..."
    echo "Recursively sets directory timestamps to match the newest file within."
    echo ""
    echo "Options:"
    echo "  --no-cleanup           Don't delete .DS_Store files or broken symlinks."
    echo "  --non-interactive      Don't prompt to close Finder windows on macOS."
    echo "  --verbose, -v          Show detailed (verbose) progress messages."
    echo "  --quiet, -q            Suppress all informational output except errors."
    echo "  --dry-run              Show what would be changed without making any changes."
    echo "  --exclude PATTERN, -e  Exclude directories matching PATTERN from processing."
    echo "  --version              Show script version."
    echo "  --help, -h             Show this help message."
    echo ""
    echo "Template Management:"
    echo "  --template PATH        Use a specific .DS_Store template file for this session."
    echo "  --set-template PATH    Save a .DS_Store template path to the user config."
    echo "  --show-template        Show the current .DS_Store template configuration."
    echo "  --generate-user-template Create a native .DS_Store template on macOS."
    echo ""
    echo "For more details, see the documentation or run 'man dir-time-downdate'."
    exit 0
}

# Logging functions that respect --quiet flag
log_verbose() {
    if [[ "$VERBOSE" == "true" && "$QUIET_MODE" == "false" ]]; then
        echo "Verbose: $@"
    fi
}

log_info() {
    if [[ "$QUIET_MODE" == "false" ]]; then
        echo "$@"
    fi
}

log_warning() {
    echo "Warning: $@" >&2
}

log_error() {
    echo "Error: $@" >&2
}

log_success() {
    if [[ "$QUIET_MODE" == "false" ]]; then
        echo "Success: $@"
    fi
}

# XDG Configuration paths
SYSTEM_CONFIG_DIR="/etc/xdg/dir-time-downdate"
SYSTEM_CONFIG_FILE="$SYSTEM_CONFIG_DIR/config"
USER_CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/dir-time-downdate"
USER_CONFIG_FILE="$USER_CONFIG_DIR/config"
OLD_CONFIG_FILE="$HOME/.dir-time-downdate.conf"

create_user_config_dir() {
    if [[ ! -d "$USER_CONFIG_DIR" ]]; then
        mkdir -p "$USER_CONFIG_DIR"
        log_verbose "Created user config directory: $USER_CONFIG_DIR"
    fi
}

migrate_old_config() {
    if [[ -f "$OLD_CONFIG_FILE" && ! -f "$USER_CONFIG_FILE" ]]; then
        create_user_config_dir
        mv "$OLD_CONFIG_FILE" "$USER_CONFIG_FILE"
        log_info "Migrated config from $OLD_CONFIG_FILE to $USER_CONFIG_FILE"
    fi
}

load_config_file() {
    local config_file="$1"
    if [[ -f "$config_file" ]]; then
        source "$config_file"
        log_verbose "Loaded configuration from $config_file"
    fi
}

load_config() {
    migrate_old_config
    load_config_file "$SYSTEM_CONFIG_FILE"
    load_config_file "$USER_CONFIG_FILE"
}

set_template_config() {
    local template_path="$1"
    if [[ ! -f "$template_path" ]]; then
        log_error "Template file does not exist: $template_path"
        exit 1
    fi
    if [[ ! -r "$template_path" ]]; then
        log_error "Template file is not readable: $template_path"
        exit 1
    fi
    
    template_path=$(realpath "$template_path")
    create_user_config_dir
    
    echo "DSSTORE_TEMPLATE=\"$template_path\"" > "$USER_CONFIG_FILE"
    log_success "Template path saved to user configuration: $template_path"
    exit 0
}

show_template_config() {
    log_info "--- .DS_Store Template Configuration ---"
    # Effective Template - highest priority
    log_info "Effective Template: ${DSSTORE_TEMPLATE:-Not set}"
    if [[ -n "$DSSTORE_TEMPLATE" && ! -f "$DSSTORE_TEMPLATE" ]]; then
        log_warning "The configured template file does not exist."
    fi
    log_info "---"
    log_info "To set a template: --set-template /path/to/.DS_Store"
    log_info "To generate one:   --generate-user-template"
    exit 0
}

generate_user_template() {
    log_info "Attempting to generate a user-specific .DS_Store template..."
    if [[ "$OSTYPE" != darwin* ]]; then
        log_error "Template generation is only supported on macOS."
        exit 1
    fi

    local temp_dir
    temp_dir=$(mktemp -d)
    trap 'rm -rf "$temp_dir"' EXIT

    log_verbose "Asking Finder to create a new folder in $temp_dir..."
    if ! osascript -e "tell application \"Finder\" to make new folder at (POSIX file \"$temp_dir\")" >/dev/null 2>&1; then
        log_error "Failed to create folder via Finder. Ensure Finder is running."
        exit 1
    fi

    local source_dsstore="$temp_dir/New Folder/.DS_Store"
    if [[ ! -f "$source_dsstore" ]]; then
        log_error "Finder did not create a .DS_Store file."
        exit 1
    fi

    create_user_config_dir
    local dest_template="$USER_CONFIG_DIR/.DS_Store_template"
    mv "$source_dsstore" "$dest_template"
    log_verbose "Moved template to: $dest_template"

    log_verbose "Setting template timestamp to Unix epoch..."
    touch -t 197001010000 "$dest_template"
    chmod 444 "$dest_template"
    log_success "Successfully created read-only template: $dest_template"

    # Create the helper script to make it writable again
    local helper_script_path="$USER_CONFIG_DIR/.DS_Store_template-is-read-only"
    cat > "$helper_script_path" <<'EOF'
#!/bin/sh
# This script makes the .DS_Store_template file in this directory writable.

# The template is read-only by default to prevent accidental modification by you or by macOS Finder.
# If you need to delete this template or replace it with your own, you must first make it writable.
#
# To do so, run this script from your terminal:
# sh ./.DS_Store_template-is-read-only
#
# If you manually replace the template, please remember to make your new template read-only to protect it:
# chmod 444 .DS_Store_template

echo "Making .DS_Store_template writable..."
chmod u+w "$(dirname "$0")/.DS_Store_template"
echo "Done. You can now modify or delete the template file."
EOF
    chmod 755 "$helper_script_path"
    log_verbose "Created helper script to manage template permissions: $helper_script_path"

    # Now, update the configuration file
    set_template_config "$dest_template"
    
    log_success "Configuration has been updated to use the new template."
    log_info "Run 'dir-time-downdate --show-template' to see details."
    exit 0
}

should_manage_dsstore() {
    if [[ "$OSTYPE" == darwin* ]]; then
        log_verbose "macOS detected, .DS_Store management is enabled."
        return 0
    fi
    for dir in "$@"; do
        if find "$dir" -name '.DS_Store' -type f -print -quit | grep -q .; then
            log_verbose "Found .DS_Store file, management is enabled."
            return 0
        fi
    done
    return 1
}

check_for_version_mismatch() {
    # If we are in the dev directory and the script running is NOT the one in ./bin...
    local executing_script_path
    executing_script_path=$(realpath "${(%):-%x}")
    local local_dev_path
    local_dev_path="$(pwd)/bin/dir-time-downdate"

    if [[ "$(basename "$(pwd)")" == "dir-time-downdate" && "$executing_script_path" != "$local_dev_path" ]]; then
        # ...and the content is different...
        if ! diff -q "$executing_script_path" "$local_dev_path" >/dev/null 2>&1; then
            log_error "Version Mismatch Detected!"
            log_error "You are running the installed command ($executing_script_path) from within the dev directory, which has a different local version."
            log_error ""
            log_error "Run the local version with:  ./bin/dir-time-downdate"
            log_error "Or update the installed version with: sudo ./install.sh"
            exit 1
        fi
    fi
}

# --- Main Execution Logic ---

check_for_version_mismatch

# Handle special actions that exit before processing directories
if [[ "$SHOW_HELP" == "true" ]]; then
    show_help
fi
if [[ "$SHOW_TEMPLATE_CONFIG" == "true" ]]; then
    load_config
    show_template_config
fi
if [[ "$GENERATE_USER_TEMPLATE" == "true" ]]; then
    generate_user_template
fi
if [[ -n "$SET_TEMPLATE_PATH" ]]; then
    set_template_config "$SET_TEMPLATE_PATH"
fi

# Check for required directory arguments
if [[ $# -eq 0 ]]; then
    log_error "No target directories specified."
    show_help
fi

# Validate directories
for dir in "$@"; do
    if [[ ! -d "$dir" ]]; then
        log_error "Target '$dir' is not a directory or does not exist."
        exit 1
    fi
done

# Load config before main processing
load_config

# macOS-specific: prompt to close Finder windows
if [[ "$INTERACTIVE_MODE" == "true" && "$OSTYPE" == darwin* ]]; then
    if pgrep -qxF "Finder" >/dev/null 2>&1; then
        log_info "Finder is running. Close all open Finder windows to avoid conflicts."
        log_info "Press Enter to continue..."
        read -r
    fi
fi

# Cleanup Phase
if [[ "$CLEANUP_MACOS_FILES" == "true" ]]; then
    # cleanup logic can be restored here if needed
fi

# .DS_Store Creation Phase
if should_manage_dsstore "$@"; then
    if [[ -n "$DSSTORE_TEMPLATE" && -f "$DSSTORE_TEMPLATE" ]]; then
        log_verbose "Creating read-only .DS_Store files from template: $DSSTORE_TEMPLATE"
        
        # Find all directories that need .DS_Store files
        for dir in "$@"; do
            # Use similar exclusion logic as main processing
            prune_args=()
            for pattern in "${EXCLUDE_PATTERNS[@]}"; do
                norm_pattern="${pattern#./}"
                prune_args+=( -name "$norm_pattern" -prune -o )
            done
            
            # Find directories that either have .DS_Store files or need them
            while IFS= read -r target_dir; do
                [[ -d "$target_dir" ]] || continue
                
                local dsstore_path="$target_dir/.DS_Store"
                local should_create=false
                
                # Check if directory already has a .DS_Store file (replace it)
                if [[ -f "$dsstore_path" ]]; then
                    log_verbose "Replacing existing .DS_Store in: $target_dir"
                    should_create=true
                # Or create in directories that have other files (prevent future .DS_Store creation)
                elif find "$target_dir" -maxdepth 1 -mindepth 1 -not -name ".DS_Store" | grep -q .; then
                    log_verbose "Creating preventive .DS_Store in: $target_dir"
                    should_create=true
                fi
                
                if [[ "$should_create" == "true" ]]; then
                    if [[ "$DRY_RUN" == "true" ]]; then
                        log_info "[DRY RUN] Would create read-only .DS_Store in '$target_dir'"
                    else
                        # Handle existing read-only .DS_Store files
                        if [[ -f "$dsstore_path" ]]; then
                            chmod u+w "$dsstore_path"  # Make writable temporarily
                            rm -f "$dsstore_path"      # Remove old file
                        fi
                        
                        # Copy template and set proper permissions
                        cp "$DSSTORE_TEMPLATE" "$dsstore_path"
                        chmod 444 "$dsstore_path"
                        touch -t 197001010000 "$dsstore_path"  # Set to Unix epoch
                        log_verbose "Created read-only .DS_Store: $dsstore_path"
                        STATS_DSSTORE_CREATED=$((STATS_DSSTORE_CREATED + 1))
                    fi
                fi
            done < <(find "$dir" \( -name ".git" -prune -o ${prune_args[@]} -type d -print \))
        done
    else
        log_warning "Cannot manage .DS_Store files: No template is available."
        log_warning "Run with --generate-user-template or --set-template."
    fi
fi

# Main Processing Loop
local SCRIPT_WAS_DRY_RUN=$DRY_RUN
local CHANGES_WOULD_BE_MADE=false

for dir in "$@"; do
    log_verbose "Processing directory: $dir"

    # Build prune arguments for excluded patterns
    prune_args=()
    for pattern in "${EXCLUDE_PATTERNS[@]}"; do
        norm_pattern="${pattern#./}"
        prune_args+=( -name "$norm_pattern" -prune -o )
    done

    # Process directories in depth-first order
    while IFS= read -r directory; do
        [[ -d "$directory" ]] || continue # Skip if directory no longer exists

        # Build exclusion for file-level find - skip files in excluded dirs
        file_exclude_args=()
        for pattern in "${EXCLUDE_PATTERNS[@]}"; do
            norm_pattern="${pattern#./}"
            file_exclude_args+=( -not -path "$directory/$norm_pattern/*" -not -name "$norm_pattern" )
        done

        # Find the newest file or subdirectory within the current directory - not recursively
        local newest_file=""
        local newest_time=0
        
        while IFS= read -r item; do
            STATS_FILES_SCANNED=$((STATS_FILES_SCANNED + 1))
            typeset -i item_time=0 >/dev/null 2>&1
            item_time=$(stat -f %m "$item") >/dev/null 2>&1
            if (( item_time > newest_time )); then
                newest_time=$item_time
                newest_file=$item
            fi
        done < <(find "$directory" -maxdepth 1 -mindepth 1 -not -name ".git" -not -name ".DS_Store" "${file_exclude_args[@]}")
        
        # Update directory timestamp if we found files
        if [[ -n "$newest_file" ]]; then
            typeset -i dir_time=0 >/dev/null 2>&1
            dir_time=$(stat -f %m "$directory") >/dev/null 2>&1
            
            # Only update if the timestamps are different
            if (( newest_time != dir_time )); then
                CHANGES_WOULD_BE_MADE=true
                if [[ "$DRY_RUN" == "true" ]]; then
                    log_info "[DRY RUN] Would update '$directory' to match '$newest_file'"
                else
                    touch -r "$newest_file" "$directory"
                    log_verbose "Updated '$directory' to match '$newest_file'"
                    STATS_DIRS_UPDATED=$((STATS_DIRS_UPDATED + 1))
                fi
            else
                log_verbose "Timestamp for '$directory' is already correct."
            fi
        else
            log_verbose "Directory '$directory' is empty, leaving timestamp unchanged."
        fi
    done < <(find "$dir" \( -name ".git" -prune -o ${prune_args[@]} -type d -print \))
done

if [[ "$SCRIPT_WAS_DRY_RUN" == "true" && "$CHANGES_WOULD_BE_MADE" == "false" ]]; then
    log_info "All directory timestamps are already up to date. No changes needed."
fi

log_success "Processing complete."
log_info "Directories processed: $#."
log_info "Files scanned: $STATS_FILES_SCANNED."
log_info "Directories updated: $STATS_DIRS_UPDATED."
if (( STATS_DSSTORE_CREATED > 0 )); then
    log_info ".DS_Store files created: $STATS_DSSTORE_CREATED."
fi 